{
  "date" : 1201766400000,
  "title" : "Closures",
  "body" : "There has been a lot of chatter about the <a href=\n\"http://gafter.blogspot.com/2006/08/closures-for-java.html\">closures\nproposal</a> penned by Neal Gafter. And, in particular, whether or\nnot I support it. I absolutely do. My \"Feel of Java\" talk of many\nyears ago got rather infamously twisted at JavaPolis a couple of\nmonths ago. Java feels alive, not stuck in some chisel marks on\nstone tablets. Closures were left out of Java initially more\nbecause of time pressures than anything else. Closures, as a\nconcept, are tried and true - well past the days of being PhD\ntopics. The arguments are in the details, not the broad concepts.\nIn the early days of Java the lack of closures was pretty painful,\nand so inner classes were born: an uncomfortable compromise that\nattempted to avoid a number of hard issues. But as is normal in so\nmany design issues, the simplifications didn't really solve any\nproblems, they just moved them. We should have gone all the way\nback then. Some have criticized the current proposal as being too\ncomplex. If you read through all of what Neal has written, you'll\nsee that there are two sources of this perception: the spec is\nreally detailed and explores all kinds of corner cases that never\nget touched on in most programming manuals; and the proposal is a\ncollection of features that at first blush seem separate, but in\nfact are deeply inter-related and push each other into existence.\n",
  "images" : [ ]
}