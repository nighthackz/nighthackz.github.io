{
  "date" : 1168243200000,
  "title" : "Compiler fun",
  "body" : "There's lots of fun to be had playing around with javac. I've never\nbeen real happy with debates about language features, I'd much\nrather implement them and try them out. For example, over\nchristmas, <a href=\n\"http://weblogs.java.net/blog/forax/archive/2006/12/call_me_santa.html\">R&#233;mi\nForax</a> did an implementation of the \":=\" declaration syntax,\nalong with some other type inferencing touches. [I used to give\nmyself an annual christmas present: I'd do a \"Christmas hack\" that\nwas just for fun... That ended when children entered the picture.\nMy Christmas hack was fun, but children are better] \n\n<p>For years I've wanted to set up a \"<a href=\n\"http://ksl.dev.java.net\">Kitchen Sink Language</a>\" website for\nexperimentation. A place where people could throw language\nfeatures, no matter how absurd, just so that folks could play\naround. Now that javac has been open-sourced, it's easy. Peter von\nder Ah&#233; beat me to it and built the site, but he hasn't quite\ngot it ready yet.</p>\n\n<p>Playing with javac is particularly easy since it got repackaged\nas a NetBeans extension. It's an odd but slick way to make it\neasily available: when running NetBeans 5.5, go to the update\ncenter. You'll find a javac project tool... Download it and create\na javac project. It gets pre-populated with all the sources of\njavac. Lots of fun.</p>\n\n<p>Even if you don't want to create a new language extension,\ninstalling the javac sources is interesting if you like studying\ncompilers. It's a particularly nicely written one. No, I didn't\nwrite it: I wrote the original java compiler, which was a C\nprogram. It has thankfully been dead for years.</p>\n\n<p>If you're into extreme sillyness, you can rewack the parser\ncompletely so that it will compile other languages. Several years\nago I actually wrote a Fortran parser on top of javac - it was good\nenough to compile LINPACK, but not much else. I did eventually come\nto my senses and throw it away.</p>\n\n<p>Another thing you can use javac for is dropping code into it\nthat studies the parse tree. I like to do that when analysing\nlanguage features: come up with a tree walker that looks for things\nthat could be rewritten to use a proposed new feature. Rather than\nusing javac, you can play with Jackpot in NetBeans to get the same\ncapabilities (Jackpot is really just a UI for the AST). It's pretty\ndepressing how few new language features improve more that a thin\nsliver of code. One of the reasons I like \":=\" and operator\noverloading for [] to map to container classes is that they\nsimplify visual clutter all over the place.</p>\n\n",
  "images" : [ ]
}