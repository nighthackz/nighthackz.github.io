{
  "date" : 1070438400000,
  "title" : "The Peter Principle: software developers version",
  "body" : "There's a classic book called <i>The Peter Principle</i> by\nLaurence J. Peter. The short summary is that <i>in a hierarchy\nevery employee tends to rise to their level of incompetence</i>.\nWhy this should be is pretty obvious: if someone is good at what\nthey do, they get a promotion. Eventually they get to where they're\nnot good enough to get the next promotion, so they stay there: at\ntheir level of incompetance.\n\n<p>Software development organizations all have a version of this\nproblem: if they're developing some system, and things are going\nwell, it's impossible to resist adding just one more feature or\nextending some requirement. This feature creep continues until the\nwhole system and organization are on the brink of falling apart.\nIt's this level of organizational pain that gives folks the ability\nto say <i>no</i> to the next feature request. It takes an\nextraordinarily disciplined team to say <i>no</i> before they've\nhit their pain limit.</p>\n\n<p>Related to this there is a problem plagues folks like me, who\ndevelop tools: we percieve some level of pain in a developer\norganization, so we develop or enhance a tool to alleviate the\npain. But over the long term we discover that we can't actually\nmake pain go away: the developers happily use the tool, that source\nof pain is solved, but then they go up more notches in complexity\nuntil they run into another source of pain.</p>\n\n",
  "images" : [ ]
}