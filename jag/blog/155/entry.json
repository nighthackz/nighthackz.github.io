{
  "date" : 1137744000000,
  "title" : "Cosine redux",
  "body" : "<blockquote style=\"font-style: italic\">\n  It's been quite a while since my last blog entry: I had a bit of\n  a technology meltdown that I'm not quite done with yet :-(\n</blockquote>\n\n<p>I was doing some recreational hacking over the holidays that\ninvolved evaluating cosines. I ended up doing (once again!) an\nimplementation of cosine (don't ask why). Given the confused\nflamage that my previous posts on cosine generated, I figure that\nshowing some code would be useful. I would never have thought that\ncosine would generate so much email traffic. Yes, I know about\nTaylor series. No I wasn't trying to insult centuries of standard\nmathematical practice. Performance is often the art of cheating\ncarefully.</p>\n\n<p style=\"text-align: left\">So, here's my <a href=\n\"http://blogs.sun.com/roller/resources/jag/CosineFun.java\">implementation\nof cosine</a>, with its argument in turns (1 turn == 360\ndegrees):</p>\n<pre>\npublic static float cost(float f) {\n    int bits = Float.floatToRawIntBits(f);\n    int mantissa = (bits&amp;0x7FFFFF)|(1&lt;&lt;23);\n    int shift = (bits&lt;&lt;1&gt;&gt;&gt;24)-127+9; // exponent, unbiased, with shift\n    if(shift&gt;=32 || shift&lt;=-32) return 1;\n    int fractionBits = shift&gt;=0 ? mantissa&lt;&lt;shift : mantissa&gt;&gt;-shift;\n    int tableIndex = (fractionBits&gt;&gt;&gt;(30-resultPrecision))&amp;tableSizeMask;\n    switch(fractionBits&gt;&gt;&gt;30) { // Quadrant is top two bits\n        case 0: return cosTable[tableIndex];\n        case 1: return -cosTable[tableSizeMask-tableIndex];\n        case 2: return -cosTable[tableIndex];\n        default/*case 3*/: return cosTable[tableSizeMask-tableIndex];\n    }\n}\n</pre>\nLets go through this slowly: \n\n<ol>\n  <li><tt>int bits = Float.floatToRawIntBits(f);</tt><br>\n  Get the IEEE 754 bits</li>\n\n  <li><tt>int mantissa =\n  (bits&amp;0x7FFFFF)|(1&lt;&lt;23);</tt><br>\n  The mantissa is the bottom 23 bits - to which the hidden bit must\n  be prepended.</li>\n\n  <li><tt>int shift = (bits&lt;&lt;1&gt;&gt;&gt;24)-127+9;</tt><br>\n  Extract the exponent, correct for the exponent bias, then add a\n  bias to move the binary point to the top of the word.</li>\n\n  <li><tt>if(shift&gt;=32 || shift&lt;=-32) return 1;</tt><br>\n  If the shift is too large, the fraction bits would be zero,\n  therefore the result is 1.</li>\n\n  <li><tt>int fractionBits = shift&gt;=0 ? mantissa&lt;&lt;shirt :\n  mantissa&gt;&gt;-shift;</tt><br>\n  Shift the mantissa so that it's a fixed point number with the\n  binary point at the top of the 32 bit int. The magic is in what's\n  not here: because the argument is in turns, I get to ignore all\n  of the integer bits (range reduction made trivial); and because\n  it's the cosine function, which is symmetric about the origin, I\n  get to ignore the sign.</li>\n\n  <li><tt>int tableIndex =\n  (fractionBits&gt;&gt;&gt;(30-resultPrecision))&amp;tableSizeMask;</tt><br>\n  The top two bits are the quadrant... extract the bits below that\n  to derive a table index.</li>\n\n  <li><tt>switch(fractionBits&gt;&gt;&gt;30) {</tt><br>\n  One case for each quadrant. This switch could be eliminated by\n  making the table 4 times larger.</li>\n\n  <li><tt>case 0: return cosTable[tableIndex];</tt><br>\n  Yes! It's just a table lookup! Truly trivial.</li>\n\n  <li><tt>case 1: return\n  -cosTable[tableSizeMask-tableIndex];</tt><br>\n  ...</li>\n</ol>Since this is just a table lookup, the resulting approximation\ncan be pretty jagged if the table is small. But it's easy to tune\nthe table size depending on accuracy needs. The smaller the table\nis, the higher the cache hit rate will be, and the more likely it\nis that the whole table will fit in cache. \n\n<p>Table lookups are a very common way to implement mathematical\nfunctions, particularly the periodic ones like cosine. There are\nall kinds of elaborations. One of the most common for improving\naccuracy is to do some sort of interpolation between table elements\n(linear or cubic, usually).</p>\n\n",
  "images" : [ {
    "image" : "floatbits.png",
    "href" : null,
    "align" : "right",
    "width" : 257,
    "height" : 49
  }, {
    "image" : "cos1.png",
    "href" : null,
    "align" : "right",
    "width" : 194,
    "height" : 109
  } ]
}