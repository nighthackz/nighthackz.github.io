{
  "date" : 1128063600000,
  "title" : "SOA: Buzzworld Whiplash or Real Meat?",
  "body" : "For some odd reason, long lost in the fuzzy recesses of my memory,\nI agreed to give a talk last week at Oracle OpenWorld on SOA. It's\na topic that I'm not an expert on. There are lots of people around\nwho know far more about it than I do. A lot of my unease about\ngiving the talk was that I was very confused about what SOA is, and\nthat ended up being what I spent most of my hour onstage talking\nabout. \n\n<p style=\"text-align: left\">There are a lot of corporations,\nanalysts, consultants, experts, \"experts\" and pundits saying a lot\nof things about SOA, without a lot of consistancy about the meaning\nof the term. When you expand the acronym to \"Service Oriented\nArchitecture\" you get a pretty good, but broad, picture. The <a\nhref=\"http://en.wikipedia.org/wiki/Service-oriented_architecture\"\nshape=\"rect\">Wikipedia definition</a> is one of the better ones out\nthere. In most descriptions, SOA has become a broad cellectiom of\ntechniques that go far beyond just architecting systems as\nservices. The topic feels a lot like that quote from <a href=\n\"http://en.wikiquote.org/wiki/Lewis_Carroll\" shape=\"rect\">Through\nthe Looking Glass</a>:</p>\n\n<p style=\"margin-left: 0.5i; text-align: left\"><i>'When I use a\nword,' Humpty Dumpty said in rather a scornful tone, 'it means just\nwhat I choose it to mean--neither more nor less.'<br clear=\"none\">\n'The question is,' said Alice, 'whether you CAN make words mean so\nmany different things.'<br clear=\"none\">\n'The question is,' said Humpty Dumpty, 'which is to be master...\nthat's all.'</i></p>\n\n<p style=\"text-align: left\">There is a collection articles that\ninsist that SOA is not OOP (or OOP-ITL [Object Oriented Programming\nIn The Large]). They draw weird distinctions that mostly\ndemonstrate how little they understand of OOP. A common\nmisunderstanding is the belief that everything that can be done to\nan object must be a method on the object - for example that \"play\"\nmust be a method on a \"MusicCD\" object, tying the service to the\nobject. In this example, the right way to have done it is to\nrepresent the CD player as an object distinct from the CD itself,\nwhich would be played with a statement like \"player.play(cd)\". OOP\nis a modeling tool, how you choose to model a situation is a matter\nof taste, the situation at hand, and engineering judgement.</p>\n\n<p style=\"text-align: left\">Then there's the camp that defines SOA\nas just being the same as OOP. I rather like this because it meshes\nwell with the phrase \"Service Oriented Architecture\", which is the\nway that I tend to think of most good OOP designs. Using the\nprevious example, rather than having verbs like \"play\" be methods\non the CD object it's usually better to try to restrict methods to\nthings that are intrinsic to the object. One could argue in this\nworld that perhaps SOA could be thought of as a subset of OOP,\nsince there are many other architectures that can be modeled within\nOOP.</p>\n\n<p style=\"text-align: left\">One of the concepts here that is often\nnot made clear in these discussions is the distinction between a\n<b>serv<u>er</u></b> and a <b>serv<u>ice</u></b>. A server is an\nimplementation artifact: usually a machine. A service is an\nabstract concept that may be implemented by some number of servers\n(perhaps zero, perhaps many). The mapping between services and\nservers should be dynamic, depending on factors like load and\nquality of service - implemeted in things like the N1 Service\nProvisioning System.</p>\n\n<p style=\"text-align: left\">The last bit of confusion for me is\nthat in most discussions, SOA is about more than just architecting\naround services. The \"S\" in SOA should expand to \"Scale\", since so\nmuch of what is talked about is how to archtect these systems for\nlarge scales. <a href=\n\"http://en.wikipedia.org/wiki/Stateless_server\" shape=\n\"rect\">Statelessness</a> and <a href=\n\"http://en.wikipedia.org/wiki/Idempotent_%28software%29\" shape=\n\"rect\">idempotence</a> are techniques that have been around for\nyears (both appear, for example, in the design of NFS from 20 years\nago) are usually considered key components of SOA\narchitectures.</p>\n\n<p style=\"text-align: left\">In the end, there's a big bag of\ntechniques that you may or may not want to use. Whether the\ncollection you need fits someone's definition of SOA shouldn't\nmatter - do what's appropriate. Statelessness and idempotence are\ntough and only really valuable at high levels of scale. Proper OO\nstructuring is always a good idea.</p>\n\n",
  "images" : [ {
    "image" : "SOAdisjoint.png",
    "href" : null,
    "align" : "right",
    "width" : 277,
    "height" : 83
  }, {
    "image" : "SOAsame.png",
    "href" : null,
    "align" : "right",
    "width" : 122,
    "height" : 82
  }, {
    "image" : "SOAsuper.png",
    "href" : null,
    "align" : "right",
    "width" : 191,
    "height" : 128
  } ]
}