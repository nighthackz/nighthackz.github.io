{
  "date" : 1287730800000,
  "title" : "Steve Jobs Comments on Apple's Java Discontinuation",
  "body" : "Macrumors has an article on <a href=\n\"http://www.macrumors.com/2010/10/22/steve-jobs-comments-on-apples-java-discontinuation/\">the\nfuss about Java on the Mac</a>. They quote Jobs as saying: \n\n<blockquote>\n  Sun (now Oracle) supplies Java for all other platforms. They have\n  their own release schedules, which are almost always different\n  than ours, so the Java we ship is always a version behind. This\n  may not be the best way to do it.\n</blockquote>It simply isn't true that \"Sun (now Oracle) supplies\nJava for all other platforms\". IBM supplies Java for IBM's\nplatforms, HP for HP's, even Azul systems does the JVM for their\nsystems (admittedly, these all start with code from Snorcle - but\nthen, so does Apple). In the beginning, Microsoft provided Java for\nWindows - but Sun took over when Microsoft violated their contract\nand made Java code written on Windows unable to run on other\nsystems. Sun also provided the VM for Linux because there was no\none else to do it. In all the other cases, the platform owners\nwanted to do the ports themselves so that they could put a lot of\nenergy into it, and because they knew the platforms better than\nanyone else. Apple was the same: in the early days, they were\ninsistent on doing the port themselves. They put terrific energy\ninto it. They did a good job. But then, as OS X took hold and Apple\nwas able to convince developers to target their\nnon-portable/proprietary environment, Apple's fundamental\ncontrol-freak tendency took over and they put less and less energy\ninto Java. It also didn't help that the early ports that they did\nwere heavily customized - far more than they needed to be. This\nmade upgrading to subsequent releases very hard, and for quite a\nwhile Apple's JVM lagged behind all other platforms. But they\neventually got their act together and their JVM upgrade pipeline\ngot streamlined and they kept up very well in recent years. \n\n<p>None the less, there were recurring discussions about having Sun\nor <a href=\"http://landonf.bikemonkey.org/static/soylatte/\">the\ncommunity</a> shoulder the burden. There were lots of obstacles.\nOne was that a lot of Apple's web sites (MobileMe, iTunes, the app\nstore) were Java apps and they were nervous about not doing the QA\nthemselves. The point became somewhat moot because Apple ended up\nusing a lot of Sun hardware (yes!). But the biggest obstacle was\ntheir use of <a href=\n\"http://arstechnica.com/apple/news/2008/02/finding-a-worm-in-the-apple-secret-apis-in-mac-os-x.ars\">secret\nAPIs</a>. Yes, OS X has piles of secret APIs. Just like the ones\nthat Microsoft had that contributed to their antitrust problems.\nThe big area (that I'm aware of) where these are used is in\ngraphics rendering.</p>\n\n<p>A particularly ironic area was in aliased versus antialiased\nrendering: Apple's graphics pipeline is well designed: they do\nantialiasing beautifully throughout. The Java graphics spec has\nsome careful wording to allow Apple-style antialiased-only\npipelines to be used. Code that works well with this style of\nrendering is easy to write. Unfortunately, old Microsoft platforms\nonly supported aliased rendering, and some (this was rare)\napplications would have rendering artifacts if antialiasing was\nturned on. These applications were broken according to the spec,\nand most authors fixed their apps so that they worked in both\ncases. But one developer took a serious \"fuck you\" attitude on this\nissue and forced Apple to implement aliased rendering - which they\nkept secret because it was such an awful thing to have to do. The\n\"one developer\"? Oracle, of course...</p>\n\n",
  "images" : [ {
    "image" : "110033-java_cup.jpg",
    "href" : "http://www.macrumors.com/2010/10/22/steve-jobs-comments-on-apples-java-discontinuation/",
    "align" : "right",
    "width" : 71,
    "height" : 55
  } ]
}