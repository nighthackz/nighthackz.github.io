{
  "date" : 1134633600000,
  "title" : "RADlab, scripting and scale",
  "body" : "I had a long and fascinating Wednesday with a couple of folks from\nBerkeley's new RAD Lab (<a href=\n\"http://biz.yahoo.com/ap/051215/internet_lab.html?.v=2\" shape=\n\"rect\">press</a>, <a href=\"http://radlab.cs.berkeley.edu/\" shape=\n\"rect\">home</a>). While their public decoding of the acronym RAD is\n\"Reliable Adaptive Distributed\", they also care deeply about the\nmore common decoding: \"Rapid Application Development\". The\nconversation was all over the map, but a major thread was about the\ndesign tension between <a href=\n\"http://en.wikipedia.org/wiki/Scripting_language\" shape=\n\"rect\">scripting languages</a> and <a href=\n\"http://en.wikipedia.org/wiki/Programming_language\" shape=\n\"rect\">strongly typed</a> <a href=\n\"http://en.wikipedia.org/wiki/General-purpose_programming_language\"\nshape=\"rect\">general purpose</a> languages. \n\n<p style=\"text-align: left\">Over the years I've used and created a\nwide variety of scripting languages, and in general, I'm a big fan\nof them. When the project that Java came out of first started, I\nwas originally planning to do a scripting language. But a number of\nforces pushed me away from that.</p>\n\n<p style=\"text-align: left\">The biggest was concerns about\nperformance and the inevitability of scale. I can't remember how\noften I've had experiences where someone has proudly shown me some\nsystem they've put together using the scripting-language-du-jour:\nthings like an Adobe Illustrator clone written entirely in\nPostScript; a satellite groundstation diagnostic system written as\nTECO macros; a BASIC compiler written as Emacs macros; fourier\ntransform algorithms in PostScript... This list is endless. They\nalways ended with \"this is so cool, but I'd like it to be as fast\nas {C,Assembler,whatever}\". People get into scripting to quickly\nbuild small quick things, but they often grow far beyond where the\ninitial concept started.</p>\n\n<p style=\"text-align: left\">Another was about testing, reliability\nand maintainability. One of the common properties of scripting\nlanguages is brevity. This tends to lead to omitting declarations,\nweak typing and ignoring errors. Generally a great thing if you're\nquickly putting something together; not so great if you want checks\nand balances that crosscheck correctness.</p>\n\n<p style=\"text-align: left\">Another is generality. Many scripting\nlanguages get a good part of their coolness from being specialized\n- by having key functionality wired into their hearts. A good\nexample is perl, with it's great regular expressions and hash\ntables. But this drags in a number of issues, chief among them\nbeing: what if you want to do something outside the language's area\nof specialization? Many modern apps need to do exactly that, so one\nof two things happen: languages get used for wildly inappropriate\nthings (fourier transforms in PostScript), or a collection of\nlanguages get used together (which can make it very hard for any\none person to understand them, and interconnections can be a\nnightmare).</p>\n\n<p style=\"text-align: left\">The list of interesting questions is\nreally long, this blog entry could easily be a book (that I'll\nnever have time to write). This hardly scratches the surface. The\nnumber of potential PhD thesis topics is huge.</p>\n\n",
  "images" : [ {
    "image" : "2005_12_16_09-03-35-531_n2.large.png",
    "href" : null,
    "align" : "right",
    "width" : 433,
    "height" : 480
  } ]
}